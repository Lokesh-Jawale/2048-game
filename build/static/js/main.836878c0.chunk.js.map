{"version":3,"sources":["features/gameSlice.js","components/Cell.js","components/GameOver.js","components/GameBoard.js","components/Home.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["gameSlice","createSlice","name","initialState","boardSize","highScore","matrix","gameover","score","reducers","saveBoardSize","state","action","payload","saveMatrix","setGameover","saveScore","localStorage","setItem","JSON","stringify","saveHighScore","actions","selectBoardSize","gameStates","selectMatrix","selectHighScore","selectGameover","selectScore","Cell","cellValue","className","GameOver","dispatch","useDispatch","useSelector","onClick","e","preventDefault","GameBoard","useState","gridTemplateValue","setGridTemplateValue","fontsize","setFontSize","keyPressed","setKeyPressed","grid","setGrid","useEffect","window","addEventListener","handleKeyPress","removeEventListener","handleMatrixSizeChange","moveX","addNumber","newGrid","x1","y1","iterations","tempGrid","cloneDeep","Math","floor","random","str","fsize","String","i","row","j","push","moveConditions","posN","posZ","dir","console","log","moveConditionsY","table","obj","error","key","gridStyle","gridTemplateRows","gridTemplateColumns","fontSize","style","map","element","index","Home","data","Number","parse","getItem","forhtml","type","max","min","value","onChange","target","App","exact","path","store","configureStore","reducer","gameReducer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0VAUMA,EAAYC,YAAY,CAC1BC,KAAM,aACNC,aAViB,CACjBC,UAAW,EACXC,UAAW,EACXC,OAAQ,GACRC,UAAU,EACVC,MAAO,GAMPC,SAAU,CACNC,cADM,SACQC,EAAOC,GACjBD,EAAMP,UAAYQ,EAAOC,SAE7BC,WAJM,SAIKH,EAAOC,GACdD,EAAML,OAASM,EAAOC,SAE1BE,YAPM,SAOMJ,EAAOC,GACfD,EAAMJ,SAAWK,EAAOC,SAE5BG,UAVM,SAUIL,EAAOC,GACbD,EAAMH,OAASI,EAAOC,QACnBF,EAAMH,MAAQG,EAAMN,YACnBM,EAAMN,UAAYM,EAAMH,MACxBS,aAAaC,QAAQ,iBAAkBC,KAAKC,UAAUT,EAAMN,cAGpEgB,cAjBM,SAiBQV,EAAOC,GACjBD,EAAMN,UAAYO,EAAOC,YAK9B,EAGHb,EAAUsB,QAFVZ,EADG,EACHA,cAAeW,EADZ,EACYA,cAAeP,EAD3B,EAC2BA,WAC9BC,EAFG,EAEHA,YAAaC,EAFV,EAEUA,UAGJO,EAAkB,SAACZ,GAAD,OAAWA,EAAMa,WAAWpB,WAC9CqB,EAAe,SAACd,GAAD,OAAWA,EAAMa,WAAWlB,QAC3CoB,EAAkB,SAACf,GAAD,OAAWA,EAAMa,WAAWnB,WAC9CsB,EAAiB,SAAAhB,GAAK,OAAIA,EAAMa,WAAWjB,UAC3CqB,EAAc,SAAAjB,GAAK,OAAIA,EAAMa,WAAWhB,OAEtCR,IAAf,Q,eChCe6B,MAZf,YAA8B,IAAdC,EAAa,EAAbA,UAEZ,OACI,qBAAKC,UAAU,OAAf,SACI,qBAAKA,UAAWD,EAAY,UAAY,sBAAxC,SACKA,GAAwB,S,uBCgB1BE,MAnBf,WACI,IAAMC,EAAWC,cAUjB,OATiBC,YAAYR,GACXQ,YAAYZ,GAS1B,sBAAKQ,UAAU,WAAf,UACI,2CACA,wBAAQK,QATQ,SAACC,GACrBA,EAAEC,iBACFL,EAASlB,GAAY,IACrBkB,EAASvB,EAAc,KAMnB,4BC0RG6B,MArSf,WAEI,IAAMN,EAAWC,cACX9B,EAAY+B,YAAYZ,GAGxBhB,GAFY4B,YAAYT,GACfS,YAAYV,GACVU,YAAYR,IAE7B,EAAkDa,mBAAS,uBAA3D,mBAAOC,EAAP,KAA0BC,EAA1B,KACA,EAAgCF,mBAAS,QAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAAoCJ,qBAApC,mBAAOK,EAAP,KAAmBC,EAAnB,KACA,EAAgCN,mBAAS,GAAzC,mBACA,GADA,UACwBA,mBAAS,CAC7B,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,GACV,CAAC,EAAG,EAAG,EAAG,MAJd,mBAAOO,EAAP,KAAaC,EAAb,KAOAC,qBAAU,WAIN,OAHAhB,EAASjB,EAAU,IAEnBkC,OAAOC,iBAAiB,UAAWC,GAC5B,WAEHF,OAAOG,oBAAoB,UAAWD,MAE3C,IAEHH,qBAAU,WAENhB,EAASjB,EAAU,IACnBsC,MACD,CAAClD,IAEJ6C,qBAAU,WACN,OAAQJ,GACJ,IAAK,YACDU,EAAM,QACN,MACJ,IAAK,aACDA,EAAM,SACN,MACJ,IAAK,UACDA,EAAM,MACN,MACJ,IAAK,YACDA,EAAM,QAKdT,EAAc,MACf,CAACD,IAEJ,IAAMW,EAAY,SAACC,GAKf,IAHA,IAAIC,GAAM,EAAGC,GAAM,EAAGC,EAAa,IAC/BC,EAAWC,IAAUL,GAEnBG,KAGF,GAFAF,EAAKK,KAAKC,MAAMD,KAAKE,SAAW7D,GAChCuD,EAAKI,KAAKC,MAAMD,KAAKE,SAAW7D,GACR,IAArByD,EAASH,GAAIC,GAEZ,OADAE,EAASH,GAAIC,GAAM,EACZE,EAKf,OAFA5B,EAASlB,GAAY,KAEd,GAGLuC,EAAyB,WAE3B,IAAIY,EAAK,UAAa9D,EAAY,KAAO,GAAGA,EAAY,KACpD+D,EAAQC,OAAO,IAAIhE,GAAa,KAEpCsC,EAAqBwB,GACrBtB,EAAYuB,GAIZ,IADA,IAAIV,EAAU,GACNY,EAAE,EAAGA,EAAIjE,EAAWiE,IAAI,CAE5B,IADA,IAAIC,EAAM,GACFC,EAAE,EAAGA,EAAInE,EAAWmE,IACxBD,EAAIE,KAAK,GAEbf,EAAQe,KAAKF,GAIjBb,EAAUD,EAAUC,GAEpBA,EAAUD,EAAUC,GAIpBT,EAAQS,GACRxB,EAASnB,EAAW2C,KAGlBgB,EAAiB,SAACZ,EAAUQ,EAAGE,EAAGG,EAAMC,EAAMC,GAChD,IAAInB,EAAUK,IAAUD,GAsCxB,OAhCGa,GAAQ,GAAKA,EAAOtE,GAChBqD,EAAQY,GAAGE,KAAOd,EAAQY,GAAGK,IAASA,IAASH,GAC9CM,QAAQC,IAAI,oBAAsBT,EAAG,aAAcE,EAAG,OAAQG,GAC9DjB,EAAQY,GAAGK,IAAS,EACpBjB,EAAQY,GAAGE,GAAK,EAGhBtC,EAASjB,EAAUyC,EAAQY,GAAGK,MAM9BjB,EAAQY,GAAGE,KACfG,EAAOH,IAIPd,EAAQY,GAAGE,KAAOI,EAAO,GAAKA,GAAQvE,KACtCuE,EAAOJ,GAERI,GAAQ,GAAKA,EAAOvE,GAChBqD,EAAQY,GAAGE,IAAMI,IAASJ,IACzBd,EAAQY,GAAGM,GAAQlB,EAAQY,GAAGE,GAC9Bd,EAAQY,GAAGE,GAAK,EAChBG,EAAMC,EACNA,GAAQC,EACRC,QAAQC,IAAI,qBAAuBT,EAAG,aAAcE,EAAG,OAAQI,IAIvEE,QAAQC,IAAIT,EAAG,IAAKE,EAAG,IAAKG,EAAM,IAAKC,GAChC,CACHlB,QAASA,EACTiB,KAAMA,EACNC,KAAMA,IAIRI,EAAkB,SAAClB,EAAUQ,EAAGE,EAAGG,EAAMC,EAAMC,GACjD,IAAInB,EAAUK,IAAUD,GAsCxB,OAhCGa,GAAQ,GAAKA,EAAOtE,GAChBqD,EAAQY,GAAGE,KAAOd,EAAQiB,GAAMH,IAAMG,IAASL,GAC9CQ,QAAQC,IAAI,wBAA0BP,EAAG,aAAcF,EAAG,OAAQK,GAClEjB,EAAQiB,GAAMH,IAAM,EACpBd,EAAQY,GAAGE,GAAK,EAGhBtC,EAASjB,EAAUyC,EAAQiB,GAAMH,MAMjCd,EAAQY,GAAGE,KACfG,EAAOL,IAIPZ,EAAQY,GAAGE,KAAOI,EAAO,GAAKA,GAAQvE,KACtCuE,EAAON,GAERM,GAAQ,GAAKA,EAAOvE,GAChBqD,EAAQY,GAAGE,IAAMI,IAASN,IACzBZ,EAAQkB,GAAMJ,GAAKd,EAAQY,GAAGE,GAC9Bd,EAAQY,GAAGE,GAAK,EAChBG,EAAMC,EACNA,GAAQC,EACRC,QAAQC,IAAI,yBAA2BP,EAAG,aAAcF,EAAG,OAAQM,IAI3EE,QAAQC,IAAIT,EAAG,IAAKE,EAAG,IAAKG,EAAM,IAAKC,GAChC,CACHlB,QAASA,EACTiB,KAAMA,EACNC,KAAMA,IAIRpB,EAAQ,SAACqB,GAEX,IAAIf,EAAWC,IAAUf,GACzB8B,QAAQG,MAAMnB,GAEd,IACI,IAAI,IAAIQ,EAAE,EAAGA,EAAIjE,EAAWiE,IAAI,CAC5B,IAAIK,GAAQ,EAAGC,GAAQ,EACvB,GAAW,UAARC,EACC,IAAI,IAAIL,EAAEnE,EAAU,EAAGmE,GAAG,EAAGA,IAAI,CAC7B,IAAMU,EAAMR,EAAeZ,EAAUQ,EAAGE,EAAGG,EAAMC,GAAO,GACxDd,EAAWoB,EAAIxB,QACfiB,EAAOO,EAAIP,KACXC,EAAOM,EAAIN,UAGd,GAAW,SAARC,EACJ,IAAI,IAAIL,EAAE,EAAGA,EAAEnE,EAAWmE,IAAI,CAC1B,IAAMU,EAAMR,EAAeZ,EAAUQ,EAAGE,EAAGG,EAAMC,EAAM,GACvDd,EAAWoB,EAAIxB,QACfiB,EAAOO,EAAIP,KACXC,EAAOM,EAAIN,UAGd,GAAW,OAARC,EACJ,IAAI,IAAIL,EAAE,EAAGA,EAAEnE,EAAWmE,IAAI,CAC1B,IAAMU,EAAMF,EAAgBlB,EAAUU,EAAGF,EAAGK,EAAMC,EAAM,GACxDd,EAAWoB,EAAIxB,QACfiB,EAAOO,EAAIP,KACXC,EAAOM,EAAIN,UAGd,GAAW,SAARC,EACJ,IAAI,IAAIL,EAAEnE,EAAU,EAAGmE,GAAG,EAAGA,IAAI,CAC7B,IAAMU,EAAMF,EAAgBlB,EAAUU,EAAGF,EAAGK,EAAMC,GAAO,GACzDd,EAAWoB,EAAIxB,QACfiB,EAAOO,EAAIP,KACXC,EAAOM,EAAIN,MAUvB,GAHAE,QAAQG,MAAMnB,IAGE,KAFhBA,EAAWL,EAAUK,IAEE,OACvBgB,QAAQG,MAAMnB,GAEd5B,EAASnB,EAAW+C,IACpBb,EAAQa,GAEZ,MAAOqB,GACHL,QAAQC,IAAII,KAcd9B,EAAiB,SAACf,GACpBA,EAAEC,iBACFQ,EAAcT,EAAE8C,KAChBN,QAAQC,IAAIzC,EAAE8C,MAGZC,EAAY,CACdC,iBAAkB5C,EAClB6C,oBAAqB7C,EACrB8C,SAAU5C,GAGd,OACI,qBAAKZ,UAAU,YAAf,SACKxB,EACM,cAAC,EAAD,IAEH,qBACIwB,UAAU,iBAAiByD,MAAOJ,EADtC,gBAEKrC,QAFL,IAEKA,OAFL,EAEKA,EAAM0C,KAAI,SAACnB,GAAD,cACPA,QADO,IACPA,OADO,EACPA,EAAKmB,KAAI,SAACC,EAASC,GAAV,OACL,cAAC,EAAD,CAAM7D,UAAW4D,GAAcC,cCrO5CC,MAvDf,WACI,IAAM3D,EAAWC,cACX9B,EAAY+B,YAAYZ,GACxBlB,EAAY8B,YAAYT,GACxBlB,EAAQ2B,YAAYP,GAY1B,OALAqB,qBAAU,WACN,IAAI4C,EAAOC,OAAO3E,KAAK4E,MAAM9E,aAAa+E,QAAQ,oBAClD/D,EAASZ,EAAcwE,MACxB,IAGC,sBAAK9D,UAAU,OAAf,UACI,qBAAKA,UAAU,SAAf,SACI,6CAEJ,sBAAKA,UAAU,mBAAf,UACI,8CAAgB,+BAAO1B,OACvB,qBAAI0B,UAAU,WAAd,wBAAoC,+BAAOvB,UAE/C,uBAAMuB,UAAU,kBAAhB,UACI,uBAAOkE,QAAQ,aAAf,+BACA,uBACI/F,KAAK,aACLgG,KAAK,SACLC,IAAI,KACJC,IAAI,IACJC,MAAOjG,EACPkG,SA3BS,SAACjE,GACtBA,EAAEC,iBACFL,EAASvB,EAAc2B,EAAEkE,OAAOF,cA+B5B,cAAC,EAAD,IAEA,sBAAKtE,UAAU,WAAf,UACI,uDADJ,IACmC,uBAC/B,+BACI,oFACA,wFACA,2FACA,gGAEJ,+DCjCDyE,MAlBf,WAEC,OACC,cAAC,IAAD,UACC,qBAAKzE,UAAU,MAAf,SAEC,cAAC,IAAD,UACC,cAAC,IAAD,CAAO0E,OAAK,EAACC,KAAK,IAAlB,SACC,cAAC,EAAD,aCVOC,EAAQC,YAAe,CAChCC,QAAS,CACLrF,WAAYsF,KCOAC,QACW,cAA7B7D,OAAO8D,SAASC,UAEe,UAA7B/D,OAAO8D,SAASC,UAEhB/D,OAAO8D,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUV,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJW,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAClCA,EAAaC,kB","file":"static/js/main.836878c0.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\n\nconst initialState = {\n    boardSize: 4,\n    highScore: 0,\n    matrix: [],\n    gameover: false,\n    score: 0,\n}\n\nconst gameSlice = createSlice({\n    name: \"gameStates\",\n    initialState,\n    reducers: {\n        saveBoardSize(state, action) {\n            state.boardSize = action.payload\n        },\n        saveMatrix(state, action) {\n            state.matrix = action.payload\n        },\n        setGameover(state, action) {\n            state.gameover = action.payload\n        },\n        saveScore(state, action) {\n            state.score += action.payload\n            if(state.score > state.highScore){\n                state.highScore = state.score\n                localStorage.setItem(\"game-highscore\", JSON.stringify(state.highScore))\n            }\n        },\n        saveHighScore(state, action) {\n            state.highScore = action.payload;\n        }\n    }\n});\n\nexport const {\n    saveBoardSize, saveHighScore, saveMatrix,\n    setGameover, saveScore\n} = gameSlice.actions\n\nexport const selectBoardSize = (state) => state.gameStates.boardSize;\nexport const selectMatrix = (state) => state.gameStates.matrix;\nexport const selectHighScore = (state) => state.gameStates.highScore;\nexport const selectGameover = state => state.gameStates.gameover;\nexport const selectScore = state => state.gameStates.score;\n\nexport default gameSlice.reducer","import React from 'react';\nimport './Cell.css';\n\nfunction Cell({ cellValue }) {\n    \n    return (\n        <div className=\"cell\">\n            <div className={cellValue ? \"content\" : \"content contentNull\"}>\n                {cellValue ? cellValue : ' '}\n            </div>\n        </div>\n    )\n};\n\n\nexport default Cell\n","import React from 'react';\nimport \"./GameOver.css\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setGameover, selectGameover, saveBoardSize, selectBoardSize } from '../features/gameSlice';\n\nfunction GameOver() {\n    const dispatch = useDispatch();\n    const gameover = useSelector(selectGameover);\n    const boardSize = useSelector(selectBoardSize);\n\n    const handlePlayAgain = (e) => {\n        e.preventDefault();\n        dispatch(setGameover(false));\n        dispatch(saveBoardSize(3));\n    }\n\n    return (\n        <div className=\"gameover\">\n            <h2>GAME OVER</h2>\n            <button onClick={handlePlayAgain}>Play Again</button>\n        </div>\n    )\n}\n\nexport default GameOver\n","import React, { useState, useEffect } from 'react';\nimport \"./GameBoard.css\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { saveMatrix, saveScore, setGameover, selectBoardSize, selectGameover, selectHighScore, selectMatrix, selectScore } from '../features/gameSlice';\nimport Cell from './Cell';\nimport cloneDeep from \"lodash.clonedeep\";\nimport GameOver from './GameOver.js';\n\nfunction GameBoard() {\n\n    const dispatch = useDispatch();\n    const boardSize = useSelector(selectBoardSize);\n    const highScore = useSelector(selectHighScore);\n    const matrix = useSelector(selectMatrix);\n    const gameover = useSelector(selectGameover);\n\n    const [gridTemplateValue, setGridTemplateValue] = useState(\"80px 80px 80px 80px\");\n    const [fontsize, setFontSize] = useState(\"50px\");\n    const [keyPressed, setKeyPressed] = useState();\n    const [newScore, setNewScore] = useState(0);\n    const [grid, setGrid] = useState([\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n        [0, 0, 0, 0],\n    ]);\n\n    useEffect(() => {\n        dispatch(saveScore(0));\n        // Add event listerner for arrow key press\n        window.addEventListener('keydown', handleKeyPress);\n        return () => {\n            // unsubscribe event listener\n            window.removeEventListener('keydown', handleKeyPress);\n        };\n    }, [])\n\n    useEffect(() => {\n        // Create new matrix\n        dispatch(saveScore(0));\n        handleMatrixSizeChange();\n    }, [boardSize])\n\n    useEffect(() => {\n        switch (keyPressed) {\n            case \"ArrowLeft\":\n                moveX(\"LEFT\");\n                break;\n            case \"ArrowRight\":\n                moveX(\"RIGHT\");\n                break;\n            case \"ArrowUp\":\n                moveX(\"UP\");\n                break;\n            case \"ArrowDown\":\n                moveX(\"DOWN\");\n                break;\n            default:\n                break;\n        }\n        setKeyPressed('');\n    }, [keyPressed])\n\n    const addNumber = (newGrid) => {\n        // setting random int as two\n        var x1 = -1, y1 = -1, iterations = 100;\n        var tempGrid = cloneDeep(newGrid)\n\n        while(iterations--){\n            x1 = Math.floor(Math.random() * boardSize);\n            y1 = Math.floor(Math.random() * boardSize);\n            if(tempGrid[x1][y1] === 0) {\n                tempGrid[x1][y1] = 2;\n                return tempGrid;\n            }\n        }\n        dispatch(setGameover(true));\n\n        return false;\n    }\n\n    const handleMatrixSizeChange = () => {\n        // setting the grid columns and rows.\n        var str= \"repeat(\" +  boardSize + \", \"+ (85/boardSize) +\"%)\";\n        var fsize = String(210/boardSize) + \"px\";\n        // console.log(str, \" \", fsize);\n        setGridTemplateValue(str);\n        setFontSize(fsize);\n\n        // initializing new matrix\n        var newGrid = [];\n        for(let i=0; i < boardSize; i++){\n            var row = [];\n            for(let j=0; j < boardSize; j++){\n                row.push(0);\n            }\n            newGrid.push(row);\n        }\n\n        // adding two random 2's in the grid \n        newGrid = addNumber(newGrid);\n        // console.table(newGrid);\n        newGrid = addNumber(newGrid);\n        // console.table(newGrid);\n\n        // save changes to state grid \n        setGrid(newGrid)\n        dispatch(saveMatrix(newGrid));\n    }\n\n    const moveConditions = (tempGrid, i, j, posN, posZ, dir) => {\n        var newGrid = cloneDeep(tempGrid)\n\n        // condition for initializing the previous positions of numbers and zeroes in rows of matrix\n        // then later use them to decide whether to merge numbers or just swap\n\n        // condition for merging of number\n        if(posN >= 0 && posN < boardSize){\n            if(newGrid[i][j] === newGrid[i][posN] && posN !== j) {\n                console.log(\"Number merged row\" , i, \" pos from \", j, \" to \", posN)\n                newGrid[i][posN] *= 2;\n                newGrid[i][j] = 0;\n\n                // saving new score\n                dispatch(saveScore(newGrid[i][posN]));\n            }\n            else if(newGrid[i][j]){\n                posN = j;\n            };\n        }\n        else if(newGrid[i][j]){\n            posN = j;\n        };\n\n        // logic for swapping numbers with zeroes\n        if(!newGrid[i][j] && (posZ < 0 || posZ >= boardSize)){\n            posZ = j;\n        }\n        if(posZ >= 0 && posZ < boardSize){\n            if(newGrid[i][j] && posZ !== j){\n                newGrid[i][posZ] = newGrid[i][j];\n                newGrid[i][j] = 0;\n                posN= posZ;\n                posZ += dir;\n                console.log(\"Number swapped row\" , i, \" pos from \", j, \" to \", posZ)\n            }\n        }\n\n        console.log(i, \" \", j, \" \", posN, \" \", posZ)\n        return {\n            newGrid: newGrid,\n            posN: posN,\n            posZ: posZ,\n        }\n    }\n\n    const moveConditionsY = (tempGrid, i, j, posN, posZ, dir) => {\n        var newGrid = cloneDeep(tempGrid)\n\n        // condition for initializing the previous positions of numbers and zeroes in rows of matrix\n        // then later use them to decide whether to merge numbers or just swap\n\n        // condition for merging of number\n        if(posN >= 0 && posN < boardSize){\n            if(newGrid[i][j] === newGrid[posN][j] && posN !== i) {\n                console.log(\"Number merged column \" , j, \" pos from \", i, \" to \", posN)\n                newGrid[posN][j] *= 2;\n                newGrid[i][j] = 0;\n\n                // saving new score\n                dispatch(saveScore(newGrid[posN][j]));\n            }\n            else if(newGrid[i][j]){\n                posN = i;\n            };\n        }\n        else if(newGrid[i][j]){\n            posN = i;\n        };\n\n        // logic for swapping numbers with zeroes\n        if(!newGrid[i][j] && (posZ < 0 || posZ >= boardSize)){\n            posZ = i;\n        }\n        if(posZ >= 0 && posZ < boardSize){\n            if(newGrid[i][j] && posZ !== i){\n                newGrid[posZ][j] = newGrid[i][j];\n                newGrid[i][j] = 0;\n                posN= posZ;\n                posZ += dir;\n                console.log(\"Number swapped column \" , j, \" pos from \", i, \" to \", posZ)\n            }\n        }\n\n        console.log(i, \" \", j, \" \", posN, \" \", posZ)\n        return {\n            newGrid: newGrid,\n            posN: posN,\n            posZ: posZ,\n        }\n    }\n\n    const moveX = (dir) => {\n        // logic for moving all cells with 2's in X direction\n        var tempGrid = cloneDeep(grid)\n        console.table(tempGrid)\n\n        try {\n            for(let i=0; i < boardSize; i++){\n                let posN = -1, posZ = -1;\n                if(dir === \"RIGHT\"){\n                    for(let j=boardSize-1; j>=0; j--){\n                        const obj = moveConditions(tempGrid, i, j, posN, posZ, -1)\n                        tempGrid = obj.newGrid\n                        posN = obj.posN\n                        posZ = obj.posZ\n                    }\n                }\n                else if(dir === \"LEFT\"){\n                    for(let j=0; j<boardSize; j++){\n                        const obj = moveConditions(tempGrid, i, j, posN, posZ, 1)\n                        tempGrid = obj.newGrid\n                        posN = obj.posN\n                        posZ = obj.posZ\n                    }\n                }\n                else if(dir === \"UP\"){\n                    for(let j=0; j<boardSize; j++){\n                        const obj = moveConditionsY(tempGrid, j, i, posN, posZ, 1)\n                        tempGrid = obj.newGrid\n                        posN = obj.posN\n                        posZ = obj.posZ\n                    }\n                }\n                else if(dir === \"DOWN\"){\n                    for(let j=boardSize-1; j>=0; j--){\n                        const obj = moveConditionsY(tempGrid, j, i, posN, posZ, -1)\n                        tempGrid = obj.newGrid\n                        posN = obj.posN\n                        posZ = obj.posZ\n                    }\n                }\n            }\n\n\n            // ADDING RANDOM INTEGERS AND SAVING IT\n            console.table(tempGrid)\n            tempGrid = addNumber(tempGrid);\n            // handling game over\n            if(tempGrid === false) return;\n            console.table(tempGrid)\n\n            dispatch(saveMatrix(tempGrid));\n            setGrid(tempGrid);\n        }\n        catch (error) {\n            console.log(error);\n        }\n    }\n\n    const checkGameOver = (currentGrid) => {\n        var isGameOver = true;\n        for(let i = 0; i < boardSize; i++){\n            for(let j = 0; j < boardSize; j++){\n                if(!currentGrid[i][j]) isGameOver= false;\n            }\n        }\n        dispatch(setGameover(isGameOver));\n    }\n\n    const handleKeyPress = (e) => {\n        e.preventDefault();\n        setKeyPressed(e.key)\n        console.log(e.key)\n    }\n\n    const gridStyle = {\n        gridTemplateRows: gridTemplateValue,\n        gridTemplateColumns: gridTemplateValue,\n        fontSize: fontsize,\n    }\n\n    return (\n        <div className=\"gameBoard\">\n            {gameover \n                ? (<GameOver /> ) \n                :\n                <div \n                    className=\"grid-container\" style={gridStyle}>\n                    {grid?.map((row) => (\n                        row?.map((element, index) => (\n                            <Cell cellValue={element} key={index} />\n                            ))\n                        ))\n                    }\n                </div>\n            }\n        </div>\n    )\n};\n\nexport default GameBoard\n","import React, { useEffect } from 'react';\nimport './Home.css';\nimport { Link } from 'react-router-dom';\nimport GameBoard from './GameBoard.js';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { saveBoardSize, selectScore, selectBoardSize, selectHighScore, saveScore, saveHighScore } from '../features/gameSlice';\n\nfunction Home() {\n    const dispatch = useDispatch();\n    const boardSize = useSelector(selectBoardSize);\n    const highScore = useSelector(selectHighScore);\n    const score = useSelector(selectScore);\n\n    const handleSizeChange = (e) => {\n        e.preventDefault();\n        dispatch(saveBoardSize(e.target.value))\n    }\n\n    useEffect(() => {\n        var data = Number(JSON.parse(localStorage.getItem(\"game-highscore\")));\n        dispatch(saveHighScore(data));\n    }, [])\n\n    return (\n        <div className=\"home\">\n            <div className=\"header\">\n                <h1>2048 Game</h1>\n            </div>\n            <div className=\"home__scoreBoard\">\n                <h3>HighScore : <span>{highScore}</span></h3>\n                <h3 className=\"newScore\">NewScore : <span>{score}</span></h3>\n            </div>\n            <form className=\"home__container\">\n                <label forhtml=\"matrixSize\">Select Board Size</label>\n                <input\n                    name=\"matrixSize\"\n                    type=\"number\" \n                    max=\"10\"\n                    min=\"3\"\n                    value={boardSize}\n                    onChange={handleSizeChange}\n                />\n                {/* <button className=\"startButton\">\n                    START\n                </button> */}\n            </form>\n            <GameBoard />\n\n            <div className=\"helptext\">\n                <h2>How to play the Game?</h2> <br />\n                <ul>\n                    <li>Press \"Arrow UP\" to move/merge all numbers upwards</li>\n                    <li>Press \"Arrow DOWN\" to move/merge all numbers downwards</li>\n                    <li>Press \"Arrow LEFT\" to move/merge all numbers to left side</li>\n                    <li>Press \"Arrow RIGHT\" to move/merge all numbers to right side</li>\n                </ul>\n                <h1>Thank you for playing!</h1>\n            </div>\n        </div>\n    )\n}\n\nexport default Home\n","import React from 'react';\nimport './App.css';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\nimport Home from './components/Home';\n\nfunction App() {\n\n\treturn (\n\t\t<Router>\n\t\t\t<div className=\"App\">\n            \t\n\t\t\t\t<Switch>\n\t\t\t\t\t<Route exact path=\"/\">\n\t\t\t\t\t\t<Home />\n\t\t\t\t\t</Route>\n\t\t\t\t\t\n\t\t\t\t</Switch>\n\n\t\t\t</div>\n\t\t</Router>\n\t)\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport gameReducer from '../features/gameSlice.js';\n\nexport const store = configureStore({\n    reducer: {\n        gameStates: gameReducer\n    },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}